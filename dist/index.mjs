function e(e,t,i,s){return new(i||(i=Promise))((function(r,n){function o(e){try{l(s.next(e))}catch(e){n(e)}}function h(e){try{l(s.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(o,h)}l((s=s.apply(e,t||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;class t{constructor(e,t){var i,s,r;this.name=null!==(i=e.name)&&void 0!==i?i:"root",this.isFile=null!==(s=e.isFile)&&void 0!==s&&s,this.id=null!==(r=e.id)&&void 0!==r?r:"",this.parent=t,this.size=0,e.isFile?e.file((e=>{this.file=e,this.size=e.size,this.parent&&this.parent.updateSize(e.size)})):(this.children=[],this.fileCount=0)}addChild(e){this.children.push(e),e.isFile&&this.updateFileCount()}updateSize(e){this.size=this.size+e,this.parent&&this.parent.updateSize(e)}updateFileCount(){this.fileCount++,this.parent&&this.parent.updateFileCount()}getFiles(){return this.isFile?[this]:this.children.reduce(((e,t)=>e.concat(t.getFiles())),[])}}class i{constructor(e){this.root=new t({name:"root",id:e},null),this.fileCount=0}addNode(e){const i=new t(e,this.root);return this.root.addChild(i),i}processNode(e){let t=this.addNode(e);return e.isDirectory?this.parseDirectory(e,t):(this.fileCount++,Promise.resolve())}parseDirectory(e,i){return new Promise(((s,r)=>{e.createReader().readEntries((e=>{const n=e.map((e=>{const s=new t(e,i);return i.addChild(s),e.isDirectory?this.parseDirectory(e,s):(this.fileCount++,Promise.resolve())}));Promise.all(n).then((()=>s())).catch(r)}))}))}getFiles(){return this.root.getFiles()}}const s=(t,s)=>e(void 0,void 0,void 0,(function*(){const e=new i(s),r=Array.from(t).map((t=>{const i=t.webkitGetAsEntry();if(i)return e.processNode(i)}));return yield Promise.all(r),e}));export{s as constructDirectoryNodeList};
//# sourceMappingURL=index.mjs.map
